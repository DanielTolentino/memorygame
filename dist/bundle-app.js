!function(t){var e={};function a(c){if(e[c])return e[c].exports;var r=e[c]={i:c,l:!1,exports:{}};return t[c].call(r.exports,r,r.exports,a),r.l=!0,r.exports}a.m=t,a.c=e,a.d=function(t,e,c){a.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:c})},a.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},a.t=function(t,e){if(1&e&&(t=a(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var c=Object.create(null);if(a.r(c),Object.defineProperty(c,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)a.d(c,r,function(e){return t[e]}.bind(null,r));return c},a.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return a.d(e,"a",e),e},a.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},a.p="",a(a.s=1)}([function(t,e,a){"use strict";a.r(e);const c=3,r=1e3,s=7;var i=class{constructor(){this.deck=null,this.gameDeck=[],this.gameUI=null,this.turnCount=0,this.playerRating=c,this.firstCard=void 0,this.wait=(t=>new Promise((e,a)=>setTimeout(e,t)))}setDeck(t){this.deck=t}setGameUI(t){this.gameUI=t}getGameDeck(){return this.gameDeck}startNewGame(){this.firstCard=void 0,this.flipCount=0,this.turnCount=0,this.playerRating=c,this.gameDeck=this.deck.shuffle(),this.gameUI.buildDeck(this.gameDeck)}turn(t){return this.turnCount+=1,this.flipCount+=1,this.gameUI.turnCardFaceUp(t),1===this.flipCount?this.firstCard=t:this.deck.isSymbolMatch(this.gameDeck,this.firstCard,t)?this.pairMatched(this.firstCard,t):this.pairNotMatched(this.firstCard,t),this.turnCount>=s}pairMatched(t,e){console.log("----- matched! -----"),this.gameUI.markMatchedPair(t,e),this.firstCard=void 0,this.flipCount=0}async pairNotMatched(t,e){console.log("----- not matched! -----"),await this.wait(r),this.gameUI.turnCardFaceDown(t),this.gameUI.turnCardFaceDown(e),this.firstCard=void 0,this.flipCount=0}};var n=class{buildDeck(t){const e=document.createDocumentFragment();t.forEach((t,a)=>{const c=document.createElement("li");c.setAttribute("id",`${a}`),c.setAttribute("class","card");const r=document.createElement("i");r.setAttribute("class",`fa ${t.symbol}`),c.appendChild(r),e.appendChild(c)}),document.querySelector(".deck").appendChild(e)}turnCardFaceDown(t){document.getElementById(`${t}`).setAttribute("class","card")}turnCardFaceUp(t){const e=document.getElementById(`${t}`),a=e.getAttribute("class")+" open faceup ";e.setAttribute("class",a)}markMatchedPair(t,e){let a=document.getElementById(`${t}`),c=a.getAttribute("class")+" match ";a.setAttribute("class",c),c=(a=document.getElementById(`${e}`)).getAttribute("class")+" match",a.setAttribute("class",c)}};const o=new class{constructor(){this.templateCardDeck=[{symbol:"fa-diamond",faceup:!1,matched:!1},{symbol:"fa-diamond",faceup:!1,matched:!1},{symbol:"fa-paper-plane-o",faceup:!1,matched:!1},{symbol:"fa-paper-plane-o",faceup:!1,matched:!1},{symbol:"fa-anchor",faceup:!1,matched:!1},{symbol:"fa-anchor",faceup:!1,matched:!1},{symbol:"fa-bolt",faceup:!1,matched:!1},{symbol:"fa-bolt",faceup:!1,matched:!1},{symbol:"fa-cube",faceup:!1,matched:!1},{symbol:"fa-cube",faceup:!1,matched:!1},{symbol:"fa-leaf",faceup:!1,matched:!1},{symbol:"fa-leaf",faceup:!1,matched:!1},{symbol:"fa-bicycle",faceup:!1,matched:!1},{symbol:"fa-bicycle",faceup:!1,matched:!1},{symbol:"fa-bomb",faceup:!1,matched:!1},{symbol:"fa-bomb",faceup:!1,matched:!1}]}isSymbolMatch(t,e,a){return t[e].symbol===t[a].symbol}shuffle(){let t,e,a=this.templateCardDeck,c=a.length;for(;0!==c;)e=Math.floor(Math.random()*c),t=a[c-=1],a[c]=a[e],a[e]=t;return a}},u=new i,l=new n;u.setDeck(o),u.setGameUI(l),u.startNewGame(),document.querySelector(".deck").addEventListener("click",t=>{console.log("selected card id: ",t.target.getAttribute("id")),u.turn(t.target.getAttribute("id"))})},function(t,e,a){t.exports=a(0)}]);
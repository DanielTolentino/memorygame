!function(e){var t={};function a(r){if(t[r])return t[r].exports;var c=t[r]={i:r,l:!1,exports:{}};return e[r].call(c.exports,c,c.exports,a),c.l=!0,c.exports}a.m=e,a.c=t,a.d=function(e,t,r){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(a.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var c in e)a.d(r,c,function(t){return e[t]}.bind(null,c));return r},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a(a.s=1)}([function(e,t,a){"use strict";a.r(t);const r=3,c=1e3,n=7;var o=class{constructor(){this.deck=null,this.gameDeck=[],this.gameUI=null,this.turnCount=0,this.playerRating=r,this.firstCard=void 0,this.wait=(e=>new Promise((t,a)=>setTimeout(t,e)))}setDeck(e){this.deck=e}setGameUI(e){this.gameUI=e}getGameDeck(){return this.gameDeck}startNewGame(){this.firstCard=void 0,this.flipCount=0,this.turnCount=0,this.playerRating=r,this.gameDeck=this.deck.shuffle(),this.gameUI.buildDeck(this.gameDeck)}async turn(e,t){return this.turnCount+=1,this.flipCount+=1,this.gameUI.turnCardFaceUp(e),this.flipCount>1?(this.deck.isSymbolMatch(this.gameDeck,this.firstCard,t)||(console.log("not matched!"),await this.wait(c),this.gameUI.turnCardFaceDown(document.getElementById(`${this.firstCard}`)),this.gameUI.turnCardFaceDown(document.getElementById(`${t}`))),this.firstCard=void 0,this.flipCount=0):this.firstCard=t,this.turnCount>=n}};var s=class{buildDeck(e){const t=document.createDocumentFragment();e.forEach((e,a)=>{const r=document.createElement("li");r.setAttribute("id",`${a}`),r.setAttribute("class","card");const c=document.createElement("i");c.setAttribute("class",`fa ${e.symbol}`),r.appendChild(c),t.appendChild(r)}),document.querySelector(".deck").appendChild(t)}turnCardFaceDown(e){e.setAttribute("class","card")}turnCardFaceUp(e){let t=e.getAttribute("class")+" open faceup ";e.setAttribute("class",t)}};const i=new class{constructor(){this.templateCardDeck=[{symbol:"fa-diamond",faceup:!1,matched:!1},{symbol:"fa-diamond",faceup:!1,matched:!1},{symbol:"fa-paper-plane-o",faceup:!1,matched:!1},{symbol:"fa-paper-plane-o",faceup:!1,matched:!1},{symbol:"fa-anchor",faceup:!1,matched:!1},{symbol:"fa-anchor",faceup:!1,matched:!1},{symbol:"fa-bolt",faceup:!1,matched:!1},{symbol:"fa-bolt",faceup:!1,matched:!1},{symbol:"fa-cube",faceup:!1,matched:!1},{symbol:"fa-cube",faceup:!1,matched:!1},{symbol:"fa-leaf",faceup:!1,matched:!1},{symbol:"fa-leaf",faceup:!1,matched:!1},{symbol:"fa-bicycle",faceup:!1,matched:!1},{symbol:"fa-bicycle",faceup:!1,matched:!1},{symbol:"fa-bomb",faceup:!1,matched:!1},{symbol:"fa-bomb",faceup:!1,matched:!1}]}isSymbolMatch(e,t,a){return e[t].symbol===e[a].symbol}shuffle(){let e,t,a=this.templateCardDeck,r=a.length;for(;0!==r;)t=Math.floor(Math.random()*r),e=a[r-=1],a[r]=a[t],a[t]=e;return a}},u=new o,l=new s;u.setDeck(i),u.setGameUI(l),u.startNewGame(),document.querySelector(".deck").addEventListener("click",e=>{console.log("selected card id: ",e.target.getAttribute("id")),u.turn(e.target,e.target.getAttribute("id"))})},function(e,t,a){e.exports=a(0)}]);